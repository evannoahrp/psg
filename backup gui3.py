# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui3.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
import os
import pandas as pd
import sys
from keras.callbacks import EarlyStopping
from keras.callbacks import ModelCheckpoint
from keras.layers import Dense
from keras.models import load_model
from keras.models import Sequential
from keras.utils import np_utils
from keras.wrappers.scikit_learn import KerasClassifier
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from matplotlib import pyplot

class TableModel(QtCore.QAbstractTableModel):

    def __init__(self, data):
        super(TableModel, self).__init__()
        self._data = data

    def data(self, index, role):
        if role == QtCore.Qt.DisplayRole:
            value = self._data.iloc[index.row(), index.column()]
            return str(value)

    def rowCount(self, index):
        return self._data.shape[0]

    def columnCount(self, index):
        return self._data.shape[1]
    
    def headerData(self, section, orientation, role):
        # section is the index of the column/row.
        if role == QtCore.Qt.DisplayRole:
            if orientation == QtCore.Qt.Horizontal:
                return str(self._data.columns[section])

            if orientation == QtCore.Qt.Vertical:
                return str(self._data.index[section])

class Ui_MainWindow(QtWidgets.QWidget):
 
    #fungsi untuk import file csv
    def import_raw_data(self):
        #mengambil path dari file csv
        filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open File', r"C:\\Users\\Sperbia\\Documents", "CSV Files (*.csv)")
        path = filename[0]
        #print path di textfield
        self.TextEditRD.setText(path)
        #membaca file csv berdasarkan path dari user kedalam dataframe
        df = pd.read_csv(f"{path}")
        #memisahkan data input dan data output dari dataframe
        dataset = df.values
        self.datainput = dataset[:,0:5].astype(float)
        self.dataoutput = dataset[:,5:8]
        #memasukan isi dari dataframe kedalam tabel
        model = TableModel(df)
        self.tableRD.setModel(model)
    
    #fungsi untuk proses preprocessing
    def preprocessing_raw_data(self):
        #memanggil data input
        x = self.datainput
        #melakukan preprocessing kepada data input dengan normalisasi minmax
        x_scaler = preprocessing.MinMaxScaler()
        x_scaled = x_scaler.fit_transform(x)
        #hasil preprocessing input dimasukan kedalam dataframe
        df = pd.DataFrame(x_scaled, columns = ['Js.L/P', 'Berat B.', 'PB / TB', 'Posisi diukur', 'Umur'])
        #memasukan dataframe kedalam tabel
        model = TableModel(df)
        self.tablePreprocessing.setModel(model)
        #penyesuaian ukuran column dari tabel setelah memasukan dataframe
        header = self.tablePreprocessing.horizontalHeader()
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
        #membagi input berdasarkan klasifikasi
        #inputTBU dan inputBBTB sama, inputBBTB diwakilkan inputTBU 
        inputpreprocess = df.values
        inputBBU = inputpreprocess[:, [0, 1, 4]]
        inputTBU = inputpreprocess
        #membagi output berdasarkan klasifikasi
        outputBBU = self.dataoutput[:,0]
        outputTBU = self.dataoutput[:,1]
        outputBBTB = self.dataoutput[:,2]
        #memanggil class encoder
        encoder = LabelEncoder()
        #mengencode output dari klasifikasi BBU kedalam bentuk kategorial
        encoder.fit(outputBBU)
        encoded_BBU = encoder.transform(outputBBU)
        dummy_BBU = np_utils.to_categorical(encoded_BBU)
        #Baik   = 1000
        #Buruk  = 0100
        #Kurang = 0010
        #Lebih  = 0001
        #mengencode output dari klasifikasi TBU kedalam bentuk kategorial
        encoder.fit(outputTBU)
        encoded_TBU = encoder.transform(outputTBU)
        dummy_TBU = np_utils.to_categorical(encoded_TBU)
        #Normal         = 1000
        #Pendek         = 0100
        #Sangat Pendek  = 0010
        #Tinggi         = 0001
        #mengencode output dari klasifikasi BBTB kedalam bentuk kategorial
        encoder.fit(outputBBTB)
        encoded_BBTB = encoder.transform(outputBBTB)
        dummy_BBTB = np_utils.to_categorical(encoded_BBTB)
        #Gemuk          = 1000
        #Kurus          = 0100
        #Normal         = 0010
        #Sangat Kurus   = 0001
        #Split data masing masing klasifikasi menjadi training dan testing
        test = .30
        self.XBBU_train, self.XBBU_test, self.YBBU_train, self.YBBU_test = train_test_split(inputBBU, dummy_BBU, test_size = test, random_state = 0)    
        self.XTBU_train, self.XTBU_test, self.YTBU_train, self.YTBU_test = train_test_split(inputTBU, dummy_TBU, test_size = test, random_state = 0)
        self.XBBTB_train, self.XBBTB_test, self.YBBTB_train, self.YBBTB_test = train_test_split(inputTBU, dummy_BBTB, test_size = test, random_state = 0)

    def modeljst(self):
        klasifikasi = self.comboBoxKlasifikasi.currentIndex()
        if(klasifikasi == 0):
            self.xtraining = self.XBBU_train
            self.xtesting = self.XBBU_test
            self.ytraining = self.YBBU_train
            self.ytesting = self.YBBU_test
            self.inputdim = 3
        elif(klasifikasi == 1):
            self.xtraining = self.XTBU_train
            self.xtesting = self.XTBU_test
            self.ytraining = self.YTBU_train
            self.ytesting = self.YTBU_test
            self.inputdim = 5
        else:
            self.xtraining = self.XBBTB_train
            self.xtesting = self.XBBTB_test
            self.ytraining = self.YBBTB_train
            self.ytesting = self.YBBTB_test
            self.inputdim = 5

        hLayer = self.comboBoxHL.currentIndex()
        neuron1 = int(self.comboBoxNeuron1.currentText())
        aktivasi1 = str(self.comboBoxA1.currentText())
        neuron2 = int(self.comboBoxNeuron2.currentText())
        aktivasi2 = str(self.comboBoxA2.currentText())
        train = str(self.comboBoxTrain.currentText())
	    # create model
        model = Sequential()
        #layer pertama
        model.add(Dense(neuron1, input_dim = self.inputdim, activation = aktivasi1))
        #layer kedua
        if(hLayer == 1):
            model.add(Dense(neuron2, activation = aktivasi2))
        #layer output
        model.add(Dense(4, activation = 'softmax'))
        model.compile(loss='binary_crossentropy', optimizer = train, metrics=['accuracy'])
        model.summary

        # simple early stopping
        es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=200)
        mc = ModelCheckpoint('best_model.h5', monitor='val_accuracy', mode='max', verbose=1, save_best_only=True)

        #fitting the model and predicting
        model.fit(self.xtraining, self.ytraining, validation_data = (self.xtesting, self.ytesting), epochs = 4000, verbose = 0, callbacks = [es, mc])
        y_pred = model.predict(self.xtesting)
        y_test_class = np.argmax(self.ytesting,axis=1)
        y_pred_class = np.argmax(y_pred,axis=1)

        # load the saved model
        saved_model = load_model('best_model.h5')

        # evaluate the model
        _, train_acc = saved_model.evaluate(self.xtraining, self.ytraining, verbose=0)
        _, test_acc = saved_model.evaluate(self.xtesting, self.ytesting, verbose=0)
        print('Train: %.3f, Test: %.3f' % (train_acc, test_acc))

        #Accuracy of the predicted values
        print(classification_report(y_test_class,y_pred_class))
        print(confusion_matrix(y_test_class,y_pred_class))
        acc = accuracy_score(y_test_class, y_pred_class) * 100
        self.textEditAkurasi.setText('%.3f' % (acc))

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1000, 710)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")


        #Label judul
        self.labelJudul1 = QtWidgets.QLabel(self.centralwidget)
        self.labelJudul1.setGeometry(QtCore.QRect(230, 15, 540, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.labelJudul1.setFont(font)
        self.labelJudul1.setObjectName("labelJudul1")
        self.labelJudul2 = QtWidgets.QLabel(self.centralwidget)
        self.labelJudul2.setGeometry(QtCore.QRect(245, 45, 510, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.labelJudul2.setFont(font)
        self.labelJudul2.setObjectName("labelJudul2")


        #Line pemisah judul dan group box
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 69, 1001, 31))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")


        #Group Box raw data
        self.groupBoxRD = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxRD.setGeometry(QtCore.QRect(20, 100, 610, 310))
        self.groupBoxRD.setObjectName("groupBoxRD")
        #Tabel raw data
        self.tableRD = QtWidgets.QTableView(self.groupBoxRD)
        self.tableRD.setGeometry(QtCore.QRect(20, 20, 570, 225))
        self.tableRD.setObjectName("tableRD")
        #Text Edit raw data
        self.TextEditRD = QtWidgets.QTextEdit(self.groupBoxRD)
        self.TextEditRD.setGeometry(QtCore.QRect(20, 265, 350, 25))
        self.TextEditRD.setObjectName("TextEditRD")
        self.TextEditRD.setReadOnly(True)
        #Button import raw data
        self.buttonImportRD = QtWidgets.QPushButton(self.groupBoxRD)
        self.buttonImportRD.setGeometry(QtCore.QRect(390, 265, 90, 25))
        self.buttonImportRD.setObjectName("buttonImportRD")
        self.buttonImportRD.clicked.connect(self.import_raw_data)
        #Button preprocessing raw data
        self.buttonPreprocessingRD = QtWidgets.QPushButton(self.groupBoxRD)
        self.buttonPreprocessingRD.setGeometry(QtCore.QRect(500, 265, 90, 25))
        self.buttonPreprocessingRD.setObjectName("buttonPreprocessingRD")
        self.buttonPreprocessingRD.clicked.connect(self.preprocessing_raw_data)


        #Group Box preprocessing
        self.groupBoxPreprocessing = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxPreprocessing.setGeometry(QtCore.QRect(20, 420, 610, 270))
        self.groupBoxPreprocessing.setObjectName("groupBoxPreprocessing")
        #Tabel preprocessing
        self.tablePreprocessing = QtWidgets.QTableView(self.groupBoxPreprocessing)
        self.tablePreprocessing.setGeometry(QtCore.QRect(20, 20, 570, 225))
        self.tablePreprocessing.setObjectName("tablePreprocessing")


        #Group Box pelatihan
        self.groupBoxPelatihan = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxPelatihan.setGeometry(QtCore.QRect(650, 100, 330, 270))
        self.groupBoxPelatihan.setObjectName("groupBoxPelatihan")
        #Label hidden layer
        self.labelHL = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelHL.setGeometry(QtCore.QRect(20, 20, 70, 25))
        self.labelHL.setObjectName("labelHL")
        #Combo Box hidden layer
        self.comboBoxHL = QtWidgets.QComboBox(self.groupBoxPelatihan)
        self.comboBoxHL.setGeometry(QtCore.QRect(100, 20, 40, 25))
        self.comboBoxHL.setObjectName("comboBoxHL")
        self.comboBoxHL.addItem("")
        self.comboBoxHL.addItem("")
        #Label fungsi aktivasi hidden layer pertama
        self.labelA1 = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelA1.setGeometry(QtCore.QRect(180, 60, 70, 25))
        self.labelA1.setObjectName("labelA1")
        #Combo Box fungsi aktivasi hidden layer pertama
        self.comboBoxA1 = QtWidgets.QComboBox(self.groupBoxPelatihan)
        self.comboBoxA1.setGeometry(QtCore.QRect(240, 60, 70, 25))
        self.comboBoxA1.setObjectName("comboBoxA1")
        self.comboBoxA1.addItem("")
        self.comboBoxA1.addItem("")
        #Label fungsi aktivasi hidden layer kedua
        self.labelA2 = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelA2.setGeometry(QtCore.QRect(180, 100, 70, 25))
        self.labelA2.setObjectName("labelA2")
        #Combo Box fungsi aktivasi hidden layer kedua
        self.comboBoxA2 = QtWidgets.QComboBox(self.groupBoxPelatihan)
        self.comboBoxA2.setGeometry(QtCore.QRect(240, 100, 70, 25))
        self.comboBoxA2.setObjectName("comboBoxA2")
        self.comboBoxA2.addItem("")
        self.comboBoxA2.addItem("")
        #Label fungsi training
        self.labelTrain = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelTrain.setGeometry(QtCore.QRect(180, 20, 70, 25))
        self.labelTrain.setObjectName("labelTrain")
        #Combo Box fungsi training
        self.comboBoxTrain = QtWidgets.QComboBox(self.groupBoxPelatihan)
        self.comboBoxTrain.setGeometry(QtCore.QRect(240, 20, 70, 25))
        self.comboBoxTrain.setObjectName("comboBoxTrain")
        self.comboBoxTrain.addItem("")
        self.comboBoxTrain.addItem("")
        self.comboBoxTrain.addItem("")
        #Label neuron hidden layer pertama
        self.labelNeuron1 = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelNeuron1.setGeometry(QtCore.QRect(20, 60, 50, 25))
        self.labelNeuron1.setObjectName("labelNeuron1")
        #Combo Box neuron hidden layer pertama
        self.comboBoxNeuron1 = QtWidgets.QComboBox(self.groupBoxPelatihan)
        self.comboBoxNeuron1.setGeometry(QtCore.QRect(100, 60, 40, 25))
        self.comboBoxNeuron1.setObjectName("comboBoxNeuron1")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        self.comboBoxNeuron1.addItem("")
        #Label neuron hidden layer kedua
        self.labelNeuron2 = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelNeuron2.setGeometry(QtCore.QRect(20, 100, 50, 30))
        self.labelNeuron2.setObjectName("labelNeuron2")
        #Combo Box neuron hidden layer kedua
        self.comboBoxNeuron2 = QtWidgets.QComboBox(self.groupBoxPelatihan)
        self.comboBoxNeuron2.setGeometry(QtCore.QRect(100, 100, 40, 25))
        self.comboBoxNeuron2.setObjectName("comboBoxNeuron2")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        self.comboBoxNeuron2.addItem("")
        #Label klasifikasi
        self.labelKlasifikasi = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelKlasifikasi.setGeometry(QtCore.QRect(20, 140, 50, 30))
        self.labelKlasifikasi.setObjectName("labelKlasifikasi")
        #Combo Box klasifikasi
        self.comboBoxKlasifikasi = QtWidgets.QComboBox(self.groupBoxPelatihan)
        self.comboBoxKlasifikasi.setGeometry(QtCore.QRect(100, 140, 55, 25))
        self.comboBoxKlasifikasi.setObjectName("comboBoxKlasifikasi")
        self.comboBoxKlasifikasi.addItem("")
        self.comboBoxKlasifikasi.addItem("")
        self.comboBoxKlasifikasi.addItem("")
        #Button proses pelatihan
        self.buttonProsesPelatihan = QtWidgets.QPushButton(self.groupBoxPelatihan)
        self.buttonProsesPelatihan.setGeometry(QtCore.QRect(100, 180, 90, 25))
        self.buttonProsesPelatihan.setObjectName("buttonProsesPelatihan")
        self.buttonProsesPelatihan.clicked.connect(self.modeljst)
        #Button reset pelatihan
        self.buttonResetPelatihan = QtWidgets.QPushButton(self.groupBoxPelatihan)
        self.buttonResetPelatihan.setGeometry(QtCore.QRect(200, 180, 90, 25))
        self.buttonResetPelatihan.setObjectName("buttonResetPelatihan")
        #Label akurasi
        self.labelAkurasi1 = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelAkurasi1.setGeometry(QtCore.QRect(20, 220, 70, 25))
        self.labelAkurasi1.setObjectName("labelAkurasi1")
        #Text Edit akurasi
        self.textEditAkurasi = QtWidgets.QTextEdit(self.groupBoxPelatihan)
        self.textEditAkurasi.setGeometry(QtCore.QRect(100, 220, 190, 25))
        self.textEditAkurasi.setObjectName("textEditAkurasi")
        self.textEditAkurasi.setReadOnly(True)
        #Label simbol "%" akurasi
        self.labelAkurasi2 = QtWidgets.QLabel(self.groupBoxPelatihan)
        self.labelAkurasi2.setGeometry(QtCore.QRect(295, 220, 30, 25))
        self.labelAkurasi2.setObjectName("labelAkurasi2")


        #Group Box uji data tunggal
        self.groupBoxUDT = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBoxUDT.setGeometry(QtCore.QRect(650, 380, 330, 310))
        self.groupBoxUDT.setObjectName("groupBoxUDT")
        #Label jenis kelamin
        self.labelJK = QtWidgets.QLabel(self.groupBoxUDT)
        self.labelJK.setGeometry(QtCore.QRect(20, 20, 80, 25))
        self.labelJK.setAutoFillBackground(True)
        self.labelJK.setObjectName("labelJK")
        #Combo Box jenis kelamin
        self.comboBoxJK = QtWidgets.QComboBox(self.groupBoxUDT)
        self.comboBoxJK.setGeometry(QtCore.QRect(140, 20, 170, 25))
        self.comboBoxJK.setObjectName("comboBoxJK")
        self.comboBoxJK.addItem("")
        self.comboBoxJK.addItem("")
        #Label berat badan
        self.labelBB = QtWidgets.QLabel(self.groupBoxUDT)
        self.labelBB.setGeometry(QtCore.QRect(20, 60, 80, 25))
        self.labelBB.setAutoFillBackground(True)
        self.labelBB.setObjectName("labelBB")
        #Text Edit berat badan
        self.textEditBB = QtWidgets.QTextEdit(self.groupBoxUDT)
        self.textEditBB.setGeometry(QtCore.QRect(140, 60, 170, 25))
        self.textEditBB.setObjectName("textEditBB")
        #Label PB/TB
        self.labelPBTB = QtWidgets.QLabel(self.groupBoxUDT)
        self.labelPBTB.setGeometry(QtCore.QRect(20, 100, 80, 25))
        self.labelPBTB.setAutoFillBackground(True)
        self.labelPBTB.setObjectName("labelPBTB")
        #Text Edit PB/TB
        self.textEditPBTB = QtWidgets.QTextEdit(self.groupBoxUDT)
        self.textEditPBTB.setGeometry(QtCore.QRect(140, 100, 170, 25))
        self.textEditPBTB.setObjectName("textEditPBTB")
        #Label posisi diukur
        self.labelPD = QtWidgets.QLabel(self.groupBoxUDT)
        self.labelPD.setGeometry(QtCore.QRect(20, 140, 80, 25))
        self.labelPD.setAutoFillBackground(True)
        self.labelPD.setObjectName("labelPD")
        #Combo Box posisi diukur
        self.comboBoxPD = QtWidgets.QComboBox(self.groupBoxUDT)
        self.comboBoxPD.setGeometry(QtCore.QRect(140, 140, 170, 25))
        self.comboBoxPD.setObjectName("comboBoxPD")
        self.comboBoxPD.addItem("")
        self.comboBoxPD.addItem("")
        #Label umur
        self.labelUmur = QtWidgets.QLabel(self.groupBoxUDT)
        self.labelUmur.setGeometry(QtCore.QRect(20, 180, 80, 25))
        self.labelUmur.setAutoFillBackground(True)
        self.labelUmur.setObjectName("labelUmur")
        #Text Edit umur
        self.textEditUmur = QtWidgets.QTextEdit(self.groupBoxUDT)
        self.textEditUmur.setGeometry(QtCore.QRect(140, 180, 170, 25))
        self.textEditUmur.setObjectName("textEditUmur")
        #Button proses uji data tunggal
        self.buttonProsesUDT = QtWidgets.QPushButton(self.groupBoxUDT)
        self.buttonProsesUDT.setGeometry(QtCore.QRect(140, 220, 80, 25))
        self.buttonProsesUDT.setObjectName("buttonProsesUDT")
        #Button reset uji data tunggal
        self.buttonResetUDT = QtWidgets.QPushButton(self.groupBoxUDT)
        self.buttonResetUDT.setGeometry(QtCore.QRect(230, 220, 80, 25))
        self.buttonResetUDT.setObjectName("buttonResetUDT")
        #Label status gizi
        self.labelSG = QtWidgets.QLabel(self.groupBoxUDT)
        self.labelSG.setGeometry(QtCore.QRect(20, 260, 80, 25))
        self.labelSG.setAutoFillBackground(True)
        self.labelSG.setObjectName("labelSG")
        #Text Edit status gizi
        self.textEditSG = QtWidgets.QTextEdit(self.groupBoxUDT)
        self.textEditSG.setGeometry(QtCore.QRect(140, 260, 170, 25))
        self.textEditSG.setObjectName("textEditSG")
        self.textEditSG.setReadOnly(True)


        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Klasifikasi Status Gizi Balita"))
        self.labelJudul1.setText(_translate("MainWindow", "KLASIFIKASI STATUS GIZI BALITA MENGGUNAKAN"))
        self.labelJudul2.setText(_translate("MainWindow", "JARINGAN SYARAF TIRUAN BACKPROPAGATION"))
        self.groupBoxRD.setTitle(_translate("MainWindow", "Raw Data"))
        self.buttonPreprocessingRD.setText(_translate("MainWindow", "Preprocessing"))
        self.buttonImportRD.setText(_translate("MainWindow", "Import Data"))
        self.groupBoxUDT.setTitle(_translate("MainWindow", "Uji Data Tunggal"))
        self.labelJK.setText(_translate("MainWindow", "Js.L/P"))
        self.comboBoxJK.setItemText(0, _translate("MainWindow", "Laki-laki"))
        self.comboBoxJK.setItemText(1, _translate("MainWindow", "Perempuan"))
        self.buttonProsesUDT.setText(_translate("MainWindow", "Proses"))
        self.buttonResetUDT.setText(_translate("MainWindow", "Reset"))
        self.labelSG.setText(_translate("MainWindow", "Status Gizi"))
        self.labelUmur.setText(_translate("MainWindow", "Umur"))
        self.labelPD.setText(_translate("MainWindow", "Posisi Diukur"))
        self.labelPBTB.setText(_translate("MainWindow", "PB / TB"))
        self.labelBB.setText(_translate("MainWindow", "Berat B."))
        self.comboBoxPD.setItemText(0, _translate("MainWindow", "Terlentang"))
        self.comboBoxPD.setItemText(1, _translate("MainWindow", "Berdiri"))
        self.groupBoxPreprocessing.setTitle(_translate("MainWindow", "Hasil Preprocessing"))
        self.groupBoxPelatihan.setTitle(_translate("MainWindow", "Pelatihan"))
        self.labelHL.setText(_translate("MainWindow", "Hidden Layer"))
        self.labelA1.setText(_translate("MainWindow", "Aktivasi 1"))
        self.comboBoxHL.setItemText(0, _translate("MainWindow", "1"))
        self.comboBoxHL.setItemText(1, _translate("MainWindow", "2"))
        self.comboBoxA1.setItemText(0, _translate("MainWindow", "relu"))
        self.comboBoxA1.setItemText(1, _translate("MainWindow", "tanh"))
        self.comboBoxA2.setItemText(0, _translate("MainWindow", "relu"))
        self.comboBoxA2.setItemText(1, _translate("MainWindow", "tanh"))
        self.labelA2.setText(_translate("MainWindow", "Aktivasi 2"))
        self.labelAkurasi1.setText(_translate("MainWindow", "Akurasi"))
        self.labelAkurasi2.setText(_translate("MainWindow", "%"))

        self.labelTrain.setText(_translate("MainWindow", "Optimizer"))
        self.comboBoxTrain.setItemText(0, _translate("MainWindow", "Adadelta"))
        self.comboBoxTrain.setItemText(1, _translate("MainWindow", "Adam"))
        self.comboBoxTrain.setItemText(2, _translate("MainWindow", "Adamax"))

        self.labelNeuron1.setText(_translate("MainWindow", "Neuron 1"))
        self.comboBoxNeuron1.setItemText(0, _translate("MainWindow", "5"))
        self.comboBoxNeuron1.setItemText(1, _translate("MainWindow", "10"))
        self.comboBoxNeuron1.setItemText(2, _translate("MainWindow", "15"))
        self.comboBoxNeuron1.setItemText(3, _translate("MainWindow", "20"))
        self.comboBoxNeuron1.setItemText(4, _translate("MainWindow", "25"))
        self.comboBoxNeuron1.setItemText(5, _translate("MainWindow", "30"))
        self.comboBoxNeuron1.setItemText(6, _translate("MainWindow", "35"))
        self.comboBoxNeuron1.setItemText(7, _translate("MainWindow", "40"))
        self.comboBoxNeuron1.setItemText(8, _translate("MainWindow", "45"))
        self.comboBoxNeuron1.setItemText(9, _translate("MainWindow", "50"))

        self.labelNeuron2.setText(_translate("MainWindow", "Neuron 2"))
        self.comboBoxNeuron2.setItemText(0, _translate("MainWindow", "5"))
        self.comboBoxNeuron2.setItemText(1, _translate("MainWindow", "10"))
        self.comboBoxNeuron2.setItemText(2, _translate("MainWindow", "15"))
        self.comboBoxNeuron2.setItemText(3, _translate("MainWindow", "20"))
        self.comboBoxNeuron2.setItemText(4, _translate("MainWindow", "25"))
        self.comboBoxNeuron2.setItemText(5, _translate("MainWindow", "30"))
        self.comboBoxNeuron2.setItemText(6, _translate("MainWindow", "35"))
        self.comboBoxNeuron2.setItemText(7, _translate("MainWindow", "40"))
        self.comboBoxNeuron2.setItemText(8, _translate("MainWindow", "45"))
        self.comboBoxNeuron2.setItemText(9, _translate("MainWindow", "50"))

        self.labelKlasifikasi.setText(_translate("MainWindow", "Klasifikasi"))
        self.comboBoxKlasifikasi.setItemText(0, _translate("MainWindow", "BB/U"))
        self.comboBoxKlasifikasi.setItemText(1, _translate("MainWindow", "TB/U"))
        self.comboBoxKlasifikasi.setItemText(2, _translate("MainWindow", "BB/TB"))

        self.buttonProsesPelatihan.setText(_translate("MainWindow", "Proses"))

        self.buttonResetPelatihan.setText(_translate("MainWindow", "Reset"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec_())
